class ArrayMap[K,V] extends MyMap[K,V]{
	protected val keys = new ArrayBuffer[K]
	protected val values= new ArrayBuffer[V]
	
	def indexOf(k:K) : Int ={
	var i=0
	while(i<size && keys(i) != k) i+=1
	if(i<size) i else -1
	}

	def size = keys.size

	def get (k:K) :V ={
		if(indexOf(k) != -1) values(-1) else notfound(k)
	}
	
	def isEmpty = size==0
	
	def put(k:K,v:V) : Unit ={
		val i=indexOf(k)
		if(i !=-1) {
			keys.add(k)
			values.add(v)
		} else values.set(i,v)
	}

	def contains(k:K): Boolean ={
		if(indexOf(k)!=-1) true else false
	}

	def remove(k:K): Unit ={
		val j=indexOf k
		for( i <- j+1 to size-1) {
			keys set(i-1,keys get(i))
			values set(i-1,keys get(i))
		}
		keys remove(keys get size)
		values remove(values get size)
			
	}

	
}
